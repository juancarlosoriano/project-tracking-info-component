{"version":3,"sources":["images/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","href","src","logo","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,oJCwF5BC,MApFf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,WAC/B,yBAAKC,IAAKC,IAAMC,IAAI,cAEtB,4BACEJ,UAAU,iBACVK,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMV,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BW,GAAG,aAC3C,wBAAIX,UAAU,sBACZ,wBAAIA,UAAU,2BAAd,WACA,wBAAIA,UAAU,2BAAd,YACA,wBAAIA,UAAU,2BAAd,WACA,wBAAIA,UAAU,+CAAd,UACA,wBAAIA,UAAU,iDAAd,YAON,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,kBAEf,yBAAKA,UAAU,yCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,8CACX,0BAAMA,UAAU,6BAAhB,OAAuD,IACvD,0BAAMA,UAAU,2BAAhB,wBAIF,wBAAIA,UAAU,iDAAd,qBACoB,6BADpB,iBAEiB,KAEjB,0BAAMA,UAAU,yBAAhB,qCAEE,6BAFF,mBAKA,6BACA,6BACA,4BACEK,KAAK,SACLL,UAAU,iDAFZ,mBAKU,IACV,0BAAMA,UAAU,gDAAhB,uBAON,gCACE,uBAAGA,UAAU,eAAb,eACe,IACb,uBACEC,KAAK,+CACLW,OAAO,SACPC,IAAI,uBAHN,mBAFF,cASa,uBAAGZ,KAAK,KAAR,sBATb,QC5DYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.17f4eb67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dfc21d9a.svg\";","import React from \"react\";\nimport logo from \"./images/logo.svg\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light c-navbar\">\n        <a className=\"navbar-brand\" href=\"#navbar\">\n          <img src={logo} alt=\"logo-img\" />\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item c-navbar__link\">Product</li>\n            <li className=\"nav-item c-navbar__link\">Features</li>\n            <li className=\"nav-item c-navbar__link\">Pricing</li>\n            <li className=\"nav-item c-navbar__link c-navbar__link--dot\">â€¢</li>\n            <li className=\"nav-item c-navbar__link c-navbar__link--login\">\n              Login\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <div className=\"c-background-box\"></div>\n      <div className=\"c-feature-img\"></div>\n\n      <div className=\"jumbotron container-fluid c-jumbotron\">\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <p className=\"c-jumbotron__top-text c-jumbotron--lg-text\">\n              <span className=\"btn c-jumbotron__new-text\">New</span>{\" \"}\n              <span className=\"c-jumbotron__light-text\">\n                Monograph Dashboard\n              </span>\n            </p>\n            <h1 className=\"c-jumbotron__header-text c-jumbotron--lg-text\">\n              Powerful insights <br />\n              into your team{\" \"}\n            </h1>\n            <span className=\"c-jumbotron__sub-text\">\n              Project planning and time tracking\n              <br />\n              for agile teams\n            </span>\n            <br />\n            <br />\n            <button\n              type=\"button\"\n              className=\"btn c-jumbotron__cta-btn c-jumbotron--lg-text\"\n            >\n              Schedule a demo\n            </button>{\" \"}\n            <span className=\"c-jumbotron__light-text c-jumbotron--lg-text\">\n              to see a preview\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <footer>\n        <p className=\"attribution\">\n          Challenge by{\" \"}\n          <a\n            href=\"https://www.frontendmentor.io?ref=challenge/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Frontend Mentor\n          </a>\n          . Coded by <a href=\"#\">Juan Carlo Soriano</a>.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}